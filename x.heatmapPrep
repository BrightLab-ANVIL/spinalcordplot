#!/bin/zsh

# Kimberly Hemmerling 2020

function usage()
{
cat << EOF

DESCRIPTION
Perform erosion and mask creation for concentric masks of the spinal cord according \
to the tissue types. The timeseries for each voxel in each mask are outputted. These \
data can be used to create heatmaps in SCheatmap.m. Additional outputs of \
interest are all erosions and masks created, the log file maskDescriptions.txt, \
and vertebralLevels.txt. The vertebral levels can be used in the plot script to \
indicate the levels.

USAGE
  zsh x.heatmapPrep -i ~/data/sub-01/label -f ~/data/sub-01/func.nii.gz -o heatmap_output

MANDATORY ARGUMENTS
  -i <input folder>       full path to label folder (with PAM50 data from running SCT registration)
  -f <functional data>    full path to functiona data file (same file used for SCT registration)
  -o <output folder>      desired name of output folder

EOF
}
# Show usage if no arguments
if [ ! ${#@} -gt 0 ]; then
    usage `basename ${0}`
    exit 1
fi
# Initialize variables
scriptname=${0}
data_path=
outputdir=
while getopts ':hi:f:o:' OPTION; do
  case $OPTION in
    h)
          usage
          exit 1
          ;;
    i)
          data_path=$OPTARG
          ;;
    f)
          func=$OPTARG
          ;;
    o)
          output_folder=$OPTARG
          ;;
    ?)
          echo "\e[91mUnknown flag!! -$OPTARG\e[0m"
          usage
          exit 1
          ;;
  esac
done
# Check inputs exist
if [[ -z ${data_path} ]]; then
	 echo "ERROR: Input functional data path not specified. Exiting!\n"
     exit 1
fi
if [[ -z ${func} ]]; then
	 echo "ERROR: Functional data file not specified. Exiting!\n"
     exit 1
fi
if [[ -z ${output_folder} ]]; then
	 echo "ERROR: Output folder not specified. Exiting!\n"
     exit 1
fi
# Change directory to func folder and create output directory
cd ${data_path}
echo "\nLooking at functional data in... ${data_path} \n"
mkdir ../${output_folder}
echo '\nCreated new output directory called: ' ${output_folder} '\n'
cd ../${output_folder}
outputdir=`pwd`
cd ${data_path}
# All inputs are data in functional space
# Calculate functional mean image for visualizations later
fslmaths ${func} -Tmean func_mean.nii.gz
# The data_path should be the "label" folder containing these PAM50 files
input=template/PAM50_cord.nii.gz # cord mask
levels=template/PAM50_levels.nii.gz # vertebral levels (NOT CORD)
# Do checks then initialize mask descriptions log file
if [[ -f "${outputdir}/maskDescriptions.txt" ]]; then
    echo -n "Looks like you've already done this analysis, continuing will cause files to be overwritten. Would you like to continue? \e[42mEnter y or n:\e[0m "
    read CONT
    if [[ $CONT =~ ^([yY])$ ]]; then
      echo "OK, let's keep going!\n"
    elif [[ $CONT =~ ^([nN])$ ]]; then
      echo -e "\e[91mExiting!\e[0m\n"
      exit 1
    else
      echo -e "\e[91mInput not recognized. Exiting!\e[0m\n"
    fi
fi
date > ${outputdir}/maskDescriptions.txt
echo "Path to analyzed data: ${data_path}" >> ${outputdir}/maskDescriptions.txt
echo "Path to output directory: ${outputdir}" >> ${outputdir}/maskDescriptions.txt
echo "" >> ${outputdir}/maskDescriptions.txt
# Output vertebral levels text file
fslmaths ${levels} -thr 0.5 -bin ${outputdir}/tempLevelsToOne.nii.gz
fslmeants -i ${levels} -m ${outputdir}/tempLevelsToOne.nii.gz --showall > ${outputdir}/vertebralLevels.txt
rm ${outputdir}/tempLevelsToOne.nii.gz
# Need to binarize these tissue specific (probabilistic) masks
fslmaths template/PAM50_csf.nii.gz -thr 0.5 -bin ${outputdir}/full_csf_mask.nii.gz
fslmaths template/PAM50_gm.nii.gz -thr 0.5 -bin ${outputdir}/full_gm_mask.nii.gz
fslmaths template/PAM50_wm.nii.gz -thr 0.5 -bin ${outputdir}/full_wm_mask.nii.gz
csf=${outputdir}/full_csf_mask.nii.gz
gm=${outputdir}/full_gm_mask.nii.gz
wm=${outputdir}/full_wm_mask.nii.gz
###############################################################################
# OPTIONAL SECTION FOR CSF EROSION AND MASK CREATION:
# Option is prompted in command window for user input. More detailed comments are
# provided in the WM section below.
o=0 #output
i=0 #input
m=0 #mask
echo -n "GM/WM masks will be created. Do you want to include CSF? \e[42mEnter y or n:\e[0m "
read YN
if [[ $YN =~ ^([yY])$ ]]; then
  echo "\n OK, will create CSF masks..."
  echo -e "\e[1;35m    Edit CSF mask. Fill in full space inside CSF \e[0m"
  echo -e "\e[1;35m    Save to same file name. Close window when done. \n \e[0m"
  cp ${outputdir}/full_csf_mask.nii.gz ${outputdir}/csfAndCord_mask.nii.gz
  csfCord=${outputdir}/csfAndCord_mask.nii.gz
  fsleyes ${outputdir}/csfAndCord_mask.nii.gz -cm red-yellow
  # After this, ${csfCord} is really csf+gm+wm
  # Erode and make masks (descriptions for each of these steps in WM section)
  # Use cord for subtraction (input)
  sct_maths -i ${csfCord} -o ${outputdir}/erosion${o}.nii.gz -erode 3,3,1
  sct_maths -i ${csfCord} -o ${outputdir}/mask_TEMP.nii.gz -sub ${outputdir}/erosion${o}.nii.gz
  sct_maths -i ${outputdir}/mask_TEMP.nii.gz -o ${outputdir}/sub_cord_TEMP.nii.gz -sub ${input}
  fslmaths ${outputdir}/sub_cord_TEMP.nii.gz -thr 0 -bin ${outputdir}/mask${o}.nii.gz
  fslstats ${outputdir}/mask${o}.nii.gz -m >> ${outputdir}/mask_averages.txt
  mask_avg=$( tail -1 ${outputdir}/mask_averages.txt )
  rm ${outputdir}/sub_cord_TEMP.nii.gz ${outputdir}/mask_TEMP.nii.gz
  # Prepare file to store descriptions of masks
  echo "CEREBROSPINAL FLUID" >> ${outputdir}/maskDescriptions.txt
  echo "mask${o}.nii.gz" >> ${outputdir}/maskDescriptions.txt
  while (( ${mask_avg} > 0 ))
  do
    o=$(( o+1 ))
    sct_maths -i ${outputdir}/erosion${i}.nii.gz -o ${outputdir}/erosion${o}.nii.gz -erode 3,3,1
    sct_maths -i ${outputdir}/erosion${i}.nii.gz -o ${outputdir}/mask_TEMP.nii.gz -sub ${outputdir}/erosion${o}.nii.gz
    sct_maths -i ${outputdir}/mask_TEMP.nii.gz -o ${outputdir}/sub_cord_TEMP.nii.gz -sub ${input}
    fslmaths ${outputdir}/sub_cord_TEMP.nii.gz -thr 0 -bin ${outputdir}/mask${o}.nii.gz
    fslstats ${outputdir}/mask${o}.nii.gz -m >> ${outputdir}/mask_averages.txt
    mask_avg=$( tail -1 ${outputdir}/mask_averages.txt )
    rm ${outputdir}/sub_cord_TEMP.nii.gz ${outputdir}/mask_TEMP.nii.gz
    i=$(( i+1 ))
    echo "CSF mask ${i} with average: " ${mask_avg}
    echo "mask${i}.nii.gz" >> ${outputdir}/maskDescriptions.txt
  done
  # TBD delte next 3 lines
  echo -e "\e[1;35mFYI: this mask should be empty. Check file: checkIfEmpty_csf.nii.gz!!! \e[0m"
  echo -e "\e[1;35mThis file is left here to ensure no data is missed./debug. \e[0m"
  cp ${outputdir}/mask${i}.nii.gz ${outputdir}/checkIfEmpty_csf.nii.gz
  rm ${outputdir}/mask${i}.nii.gz ${outputdir}/erosion${i}.nii.gz
  # Remove last line of maskDescriptions.txt file (since it should be empty)
  sed "s/mask${i}.nii.gz/------------/" ${outputdir}/maskDescriptions.txt > ${outputdir}/tempTemp.txt
  mv ${outputdir}/tempTemp.txt ${outputdir}/maskDescriptions.txt
  # Make actual full CSF mask for later optional smoothing within mask
  # rm ${outputdir}/full_csf_mask.nii.gz
  sct_maths -i ${csfCord} -o ${outputdir}/temp_csf_mask1.nii.gz -sub ${wm}
  sct_maths -i ${outputdir}/temp_csf_mask1.nii.gz -o ${outputdir}/temp_csf_mask2.nii.gz -sub ${gm}
  fslmaths ${outputdir}/temp_csf_mask2.nii.gz -thr 0 -bin ${outputdir}/full_csf_mask.nii.gz
  rm ${outputdir}/temp_csf_mask1.nii.gz ${outputdir}/temp_csf_mask2.nii.gz
  csf=${outputdir}/full_csf_mask.nii.gz
elif [[ $YN =~ ^([nN])$ ]]; then
  echo "\n OK, no CSF. \n"
else
  echo -e "\e[91mInput not recognized. Exiting!\e[0m\n"
  exit 1
fi
###############################################################################
# WM EROSION AND MASK CREATION:
# Create first mask using full cord mask:
# Erode voxel layer from outer edges
sct_maths -i ${input} -o ${outputdir}/erosion${o}.nii.gz -erode 3,3,1
# Subtract erosion from full mask to get only outer edge mask
sct_maths -i ${input} -o ${outputdir}/mask_TEMP.nii.gz -sub ${outputdir}/erosion${o}.nii.gz
# Subtract gm mask from mask to have no gm/wm overlap
sct_maths -i ${outputdir}/mask_TEMP.nii.gz -o ${outputdir}/sub_gm_TEMP.nii.gz -sub ${gm}
# Threshold out negative values (from previous step)
fslmaths ${outputdir}/sub_gm_TEMP.nii.gz -thr 0.1 -bin ${outputdir}/mask${o}.nii.gz
# Save average value in mask to check if it's empty
fslstats ${outputdir}/mask${o}.nii.gz -m >> ${outputdir}/mask_averages.txt
# Keep current mask avg as variable
mask_avg=$( tail -1 ${outputdir}/mask_averages.txt )
# Remove temp files
rm ${outputdir}/sub_gm_TEMP.nii.gz ${outputdir}/mask_TEMP.nii.gz
# Prepare file to store descriptions of masks
echo "WHITE MATTER" >> ${outputdir}/maskDescriptions.txt
echo "mask${o}.nii.gz" >> ${outputdir}/maskDescriptions.txt
# Continue to create masks by eroding and subtracting the eroded mask iteratively
# until the center is reached. The average within a mask signifies whether the
# mask is empty yet or not, i.e. whether we're done with this section.
while (( ${mask_avg} > 0 ))
do
  o=$(( o+1 ))
  sct_maths -i ${outputdir}/erosion${i}.nii.gz -o ${outputdir}/erosion${o}.nii.gz -erode 3,3,1
  sct_maths -i ${outputdir}/erosion${i}.nii.gz -o ${outputdir}/mask_TEMP.nii.gz -sub ${outputdir}/erosion${o}.nii.gz
  sct_maths -i ${outputdir}/mask_TEMP.nii.gz -o ${outputdir}/sub_gm_TEMP.nii.gz -sub ${gm}
  fslmaths ${outputdir}/sub_gm_TEMP.nii.gz -thr 0.1 -bin ${outputdir}/mask${o}.nii.gz
  fslstats ${outputdir}/mask${o}.nii.gz -m >> ${outputdir}/mask_averages.txt
  mask_avg=$( tail -1 ${outputdir}/mask_averages.txt )
  rm ${outputdir}/sub_gm_TEMP.nii.gz ${outputdir}/mask_TEMP.nii.gz
  i=$(( i+1 ))
  echo "WM mask ${i} with average: " ${mask_avg}
  echo "mask${i}.nii.gz" >> ${outputdir}/maskDescriptions.txt
done
echo -e "\e[1;35mFYI: this mask should be empty. Check file: checkIfEmpty_wm.nii.gz!!! \e[0m"
echo -e "\e[1;35mIf not empty... need to troubleshoot/debug. \e[0m"
cp ${outputdir}/mask${i}.nii.gz ${outputdir}/checkIfEmpty_wm.nii.gz
# Remove last line of maskDescriptions.txt file (since it should be empty)
sed "s/mask${i}.nii.gz/------------/" ${outputdir}/maskDescriptions.txt > ${outputdir}/tempTemp.txt
mv ${outputdir}/tempTemp.txt ${outputdir}/maskDescriptions.txt
# Calculate timeseries for each mask:
m=0
for mask in ${outputdir}/mask*.nii.gz
do
	echo "Processing mask $m"
  fslmeants -i ${func} -m ${mask} --showall > ${outputdir}/mask${m}ts.txt
  m=$(( m+1 ))
done
###############################################################################
# No erosion needed for GM because it is quite small already
m=$(( m-1 ))
# Save gray matter mask as last mask #
cp ${gm} ${outputdir}/mask${m}.nii.gz
echo "GM mask is mask${m}.nii.gz"
# Calculate timeseries for mask:
fslmeants -i ${func} -m ${gm} --showall > ${outputdir}/mask${m}ts.txt
echo "GRAY MATTER" >> ${outputdir}/maskDescriptions.txt
echo "mask${m}.nii.gz" >> ${outputdir}/maskDescriptions.txt
###############################################################################
# Create mask visualization file allMaskVisualization.nii.gz
v=0
cp ${outputdir}/mask0.nii.gz ${outputdir}/allMaskVisualization.nii.gz
for mask in ${outputdir}/mask*.nii.gz
do
  if (( $v == 0 )); then
    v=$(( v+1 ))
  else
    v=$(( v+1 ))
    fslmaths ${mask} -mul $v -add ${outputdir}/allMaskVisualization.nii.gz ${outputdir}/temp.nii.gz
    cp ${outputdir}/temp.nii.gz ${outputdir}/allMaskVisualization.nii.gz
  fi
done
fsleyes func_mean.nii.gz ${outputdir}/allMaskVisualization.nii.gz -cm brain_colours_greengray &
###############################################################################
# Vertebral levels mask visualization
fsleyes func_mean.nii.gz ${levels} -cm blue-lightblue &
###############################################################################
# Calculate DVARS trace using PAM50_cord as the mask
3dTto1D -input ${func} -mask ${input} -method dvars -prefix ${outputdir}/dvars.txt
###############################################################################
# Extract 8 largest tracts by volume, binarize then extract ts (WIP)
# Binarize masks
mkdir ${outputdir}/tracts
fslmaths atlas/PAM50_atlas_04.nii.gz -thr 0.5 -bin ${outputdir}/tracts/LLC_mask.nii.gz # Left lateral corticospinal
fslmaths atlas/PAM50_atlas_05.nii.gz -thr 0.5 -bin ${outputdir}/tracts/RLC_mask.nii.gz # Right lateral corticospinal
fslmaths atlas/PAM50_atlas_22.nii.gz -thr 0.5 -bin ${outputdir}/tracts/LVC_mask.nii.gz # Left ventral corticospinal
fslmaths atlas/PAM50_atlas_23.nii.gz -thr 0.5 -bin ${outputdir}/tracts/RVC_mask.nii.gz # Right ventral corticospinal
fslmaths atlas/PAM50_atlas_02.nii.gz -thr 0.5 -bin ${outputdir}/tracts/LFC_mask.nii.gz # Left fasciculus cuneatus
fslmaths atlas/PAM50_atlas_03.nii.gz -thr 0.5 -bin ${outputdir}/tracts/RFC_mask.nii.gz # Right fasciculus cuneatus
fslmaths atlas/PAM50_atlas_00.nii.gz -thr 0.5 -bin ${outputdir}/tracts/LFG_mask.nii.gz # Left fasciculus gracilis
fslmaths atlas/PAM50_atlas_01.nii.gz -thr 0.5 -bin ${outputdir}/tracts/RFG_mask.nii.gz # Right fasciculus gracilis
# Extract timeseries
fslmeants -i ${func} -m ${outputdir}/tracts/LLC_mask.nii.gz --showall > ${outputdir}/tracts/LLCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/RLC_mask.nii.gz --showall > ${outputdir}/tracts/RLCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/LVC_mask.nii.gz --showall > ${outputdir}/tracts/LVCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/RVC_mask.nii.gz --showall > ${outputdir}/tracts/RVCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/LFC_mask.nii.gz --showall > ${outputdir}/tracts/LFCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/RFC_mask.nii.gz --showall > ${outputdir}/tracts/RFCts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/LFG_mask.nii.gz --showall > ${outputdir}/tracts/LFGts.txt
fslmeants -i ${func} -m ${outputdir}/tracts/RFG_mask.nii.gz --showall > ${outputdir}/tracts/RFGts.txt
###############################################################################
# Smoothing (WIP)
echo "\nBlurring func data in masks\n"
3dblurinmask -input ${func} -FWHM 2 -Mmask ${outputdir}/allMaskVisualization.nii.gz \
-prefix ${outputdir}/func_blur_inMask.nii.gz -preserve -quiet
# Calculate blurred timeseries for each mask:
m=0
for mask in ${outputdir}/mask*.nii.gz
do
	echo "Processing mask $m in func_blur_inMask.nii.gz"
  fslmeants -i ${outputdir}/func_blur_inMask.nii.gz -m ${mask} --showall > ${outputdir}/blur_mask${m}ts.txt
  m=$(( m+1 ))
done
###############################################################################
echo ""
echo -e "\e[1;35m... done! Runtime: $SECONDS seconds.\e[0m"
echo ""
echo "Note: the checkIfEmpty files can be deleted if empty.\n"
